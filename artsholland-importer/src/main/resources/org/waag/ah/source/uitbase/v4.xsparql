declare namespace dc="http://purl.org/dc/terms/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace rdfs="http://www.w3.org/2000/01/rdf-schema#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace owl="http://www.w3.org/2002/07/owl#";
declare namespace time="http://www.w3.org/2006/time#"; 
declare namespace foaf="http://xmlns.com/foaf/0.1/";
declare namespace geo="http://www.w3.org/2003/01/geo/wgs84_pos#";
declare namespace vcard="http://www.w3.org/2006/vcard/ns#";
declare namespace gr="http://purl.org/goodrelations/v1#";
declare namespace osgeo="http://rdf.opensahara.com/type/geo/";

declare namespace nub="http://resources.uitburo.nl/";
declare namespace ah="http://purl.org/artsholland/1.0/";

declare namespace waag="http://waag.org/saxon-extension";

let $baseuriUitburo := {"http://resources.uitburo.nl/"}

let $events := //event
let $productions := //production
let $venues := //location
#let $groups := //group

return

##############################################################################################################################
##################   Event   #################################################################################################
##############################################################################################################################

	if ($events) then {
		for $event in $events	
		
			let $cidn := {$event/cidn}
						
			let $euri := {waag:object-uri("event", $cidn)}
			let $euriUitburo := {concat($baseuriUitburo, "events/", $cidn)}
				
			let $pcidn := {$event/link[@type="production"]/@cidn}
			let $puri := {waag:object-uri("production", $pcidn)}
			
			let $vcidn := {$event/link[@type="location"]/@cidn}
			let $vuri := {waag:object-uri("venue", $vcidn)}
					
			let $typeKey := {waag:parse-string($event/type/@key)}
			let $typeClass := {waag:class-uri("eventType", waag:upper-case-first($typeKey))}
			
			let $statusKey := {waag:parse-string($event/status/@key)}
			let $statusClass := {waag:class-uri("eventStatus", waag:upper-case-first($statusKey))}
				
			let $room := {waag:parse-string($event/room)}
			let $ruri := {waag:object-uri("venue", $vcidn, "room", $room)}			
			
			construct { 
							
				$euri a ah:Event ;
					owl:sameAs $euriUitburo;
				
					ah:cidn {$cidn}^^xsd:string ;			
				
					ah:venue $vuri ;	
					ah:production $puri ;
				
					dc:created {waag:parse-string($event/@date-created)}^^xsd:dateTime ;
					dc:modified {waag:parse-string($event/@date-modified)}^^xsd:dateTime ;
				
					dc:title {waag:parse-string($event/title)}^^xsd:string ;
					dc:description {waag:parse-string($event/description)}^^xsd:string ;
				
					ah:eventType $typeClass ;
					ah:eventStatus $statusClass ;
					
					ah:room $ruri ;

					time:hasBeginning {$event/datetime-start}^^xsd:dateTime ;
					time:hasEnd {$event/datetime-end}^^xsd:dateTime .		
				
				$vuri a ah:Venue ;
					ah:room $ruri .
					
				$puri a ah:Production .
				
				$ruri a ah:Room ;
					rdfs:label {$room} .
				
				$typeClass a ah:EventType ;			
					rdfs:label {$typeKey}^^xsd:string .				
				
				$statusClass a ah:EventStatus ;
					rdfs:label {$statusKey}^^xsd:string .
				
				{ for $pricetag in $event/pricetags//pricetag
		
					# TODO: Als er events zijn met pricetags met zelfde type: gebruik $pos in uri
					let $turi := {waag:object-uri("event", $cidn, "ticket", waag:parse-string($pricetag/type))}					
					
					let $ofuri := {waag:object-uri("event", $cidn, "offering", waag:parse-string($pricetag/type))}					
					let $opuri := {waag:object-uri("event", $cidn, "offering", waag:parse-string($pricetag/type), "price")}
					
					construct {
					
						#$euri ah:ticket $turi .
						#
						#$turi a ah:Ticket ;						
						#	dc:title {waag:parse-string($pricetag/type)}^^xsd:string ;
						#	dc:description {waag:parse-string($pricetag/description)}^^xsd:string ;
						#	
						#	ah:ticketSalesInformation {waag:parse-string($pricetag/ticketsalesinformation)}^^xsd:string ;
						#	ah:ticketSalesTelephone {waag:parse-string($pricetag/ticketsalesphone)}^^xsd:string ;
						#	ah:ticketSalesUrl {waag:parse-http-url($pricetag/ticketsalesurl)} ;				
						#
						#	ah:lowPrice {$pricetag/lowest}^^xsd:decimal ;			
						#	ah:highPrice {$pricetag/highest}^^xsd:decimal ;
						#	ah:priceCurrency "EUR"^^xsd:string .
														
						$euri gr:offers $ofuri .
						
						$ofuri a gr:Offering ;
							gr:name {waag:parse-string($pricetag/type)}^^xsd:string ;
							gr:description {waag:parse-string($pricetag/description)}^^xsd:string ;
						
							ah:ticketSalesInformation {waag:parse-string($pricetag/ticketsalesinformation)}^^xsd:string ;
							ah:ticketSalesTelephone {waag:parse-string($pricetag/ticketsalesphone)}^^xsd:string ;
							ah:ticketSalesUrl {waag:parse-http-url($pricetag/ticketsalesurl)} ;
							
							gr:hasPriceSpecification $opuri .				
				
						$opuri a gr:PriceSpecification ;
							gr:hasMinCurrencyValue {$pricetag/lowest}^^xsd:decimal ;			
							gr:hasMaxCurrencyValue {$pricetag/highest}^^xsd:decimal ;
							
							gr:hasCurrency "EUR"^^xsd:string .					
									
					}
				} .
				
				# $pos is counter (http://stackoverflow.com/questions/5652397/xquery-counters-inside-a-for)
				{ for $medium at $pos in $event/media//medium						
					
					let $muri := {waag:object-uri("event", $cidn, "attachment", xs:string($pos))}
								
					let $typeKey := {waag:parse-string($medium/type)}
					let $typeClass := {waag:class-uri("attachmentType", waag:upper-case-first($typeKey))}
					
					construct {
					
					 	$euri ah:attachment $muri .
					 	
					 	$muri a ah:Attachment ;
							dc:title {waag:parse-string($medium/title)}^^xsd:string ;
							dc:description {waag:parse-string($medium/description)}^^xsd:string ;
						
							# TODO: string?
							#ah:url {$medium/ref}^^xsd:string ;
							ah:url {waag:parse-http-url($medium/ref)} ;
		
							# TODO:
							#	<alt>A family again</alt>
						
							ah:attachmentType $typeClass .
											
						$typeClass a ah:AttachmentType ;			
							rdfs:label {$typeKey}^^xsd:string .				
						
					}
					
				}				

			}
			
		}

##############################################################################################################################
##################   Venue   #################################################################################################
##############################################################################################################################
	
	else if ($venues) then {
		for $venue in $venues
			
			let $cidn := {$venue/cidn}
			
			let $vuri := {waag:object-uri("venue", $cidn)}
			let $vuriUitburo := {concat($baseuriUitburo, "locations/", $cidn)}
			
			let $venueType := {waag:class-uri("venueType", waag:upper-case-first($venue/type/@key))}
				
			let $lat := { waag:parse-non-zero-number($venue/geocode/latitude) }
			let $long := { waag:parse-non-zero-number($venue/geocode/longitude) }			
			
			let $auri := {waag:object-uri("address", waag:address-uri($venue/postal-code, $venue/street/number, $venue/street/addition))}
						
			construct {
			
				$vuri a ah:Venue ;		
					owl:sameAs $vuriUitburo ;
				
					ah:cidn {$cidn}^^xsd:string ;
							
					dc:title {waag:parse-string($venue/name)}^^xsd:string ;
	
					geo:lat {$lat}^^xsd:float ;
					geo:long {$long}^^xsd:float ;
	
					geo:geometry{waag:wkt-geometry($lat, $long)}^^osgeo:wkt ;
				
					dc:created {waag:parse-string($venue/@date-created)}^^xsd:dateTime ;
					dc:modified {waag:parse-string($venue/@date-modified)}^^xsd:dateTime ;
					
					ah:locationAddress $auri ;
					
					vcard:email {waag:parse-string($venue/email)}^^xsd:string ;
					
					# TODO: ah???
					ah:telephone {waag:parse-string($venue/telephone)}^^xsd:string ;
					ah:fax {waag:parse-string($venue/fax)}^^xsd:string ;
					
					ah:venueType $venueType .
					
				$venueType a ah:VenueType ;	
					rdfs:label {waag:parse-string($venue/type)}^^xsd:string .
				
				
			  $auri a ah:Address ;
        	vcard:street-address {concat($venue/street/name, " ", $venue/street/number, $venue/street/addition)} ;
					vcard:locality {waag:parse-string($venue/city)} ;
					vcard:postal-code {waag:parse-string($venue/postal-code)} .
				
				{ for $room in $venue/rooms//room
					
					let $ruri := {waag:object-uri("venue", $cidn, "room", $room)}					
					
					construct {
					
						$ruri a ah:Room ;
							rdfs:label {waag:parse-string($room)}^^xsd:string .
							
						$vuri ah:room $ruri .
						
					}
				} .
				
				{ for $url in $venue/urls//url
					construct {					
						
						$vuri foaf:homepage {waag:parse-http-url($url)} ;
						
					}
				} .				
	
				# $pos is counter (http://stackoverflow.com/questions/5652397/xquery-counters-inside-a-for)
				{ for $medium at $pos in $venue/media//medium				
					
					let $muri := {waag:object-uri("venue", $cidn, "attachment", xs:string($pos))}
										
					let $typeKey := {waag:parse-string($medium/type)}
					let $typeClass := {waag:class-uri("attachmentType", waag:upper-case-first($typeKey))}
					
					construct {
					
						$vuri ah:attachment $muri .
						
						$muri a ah:Attachment ;
							dc:title {waag:parse-string($medium/title)}^^xsd:string ;
							dc:description {waag:parse-string($medium/description)}^^xsd:string ;
						
							# TODO: string?
							ah:url {waag:parse-http-url($medium/ref)} ;
											
							# TODO:
							#	<alt>A family again</alt>	
						
							ah:attachmentType $typeClass .
							
						$typeClass a ah:AttachmentType ;
							rdfs:label {$typeKey}^^xsd:string .
										
					}
				} .				
					
				{ for $tag in $venue/tags//tag
					
					construct {	
						
						$vuri ah:tag {waag:parse-string($tag)}^^xsd:string .
						
					}
				} .
				
				{ for $language in $venue/languages//language
				
					let $language-tag := {waag:parse-locale($language/@locale)}
					
					construct {
										 
						$vuri dc:title {waag:parse-string($language/sortname)}@{$language-tag}.
						
						$vuri dc:description {waag:parse-string($language/description)}@{$language-tag}.
						$vuri ah:shortDescription {waag:parse-string($language/short-description)}@{$language-tag}.
						
						$vuri ah:openingHours {waag:parse-string($language/opening-hours)}@{$language-tag}.
						$vuri ah:publicTransportInformation {waag:parse-string($language/ov-info)}@{$language-tag}.		
						$vuri ah:disabilityInformation {waag:parse-string($language/handicapped-info)}@{$language-tag}.					
						$vuri ah:pricingInformation {waag:parse-string($language/pricing-information)}@{$language-tag}.
	
					}
				}
				
				#	TODO:
				#	editions		
			}
		}
		
##############################################################################################################################
##################   Production   ############################################################################################
##############################################################################################################################

	else if ($productions) then {
		for $production in $productions
				
			let $cidn := {$production/cidn}
			
			let $puri := {waag:object-uri("production", $cidn)}
			let $puriUitburo := {concat($baseuriUitburo, "productions/", $cidn)}
		
			#let $title := {waag:parse-string($production/title)}
			
			let $typeKey := {waag:parse-string($production/type/@key)}
			let $typeClass := {waag:class-uri("productionType", waag:upper-case-first($typeKey))}
			
			let $language := {waag:parse-locale($production/language)}
			let $subtitles :=	{waag:parse-locale($production/subtitles)}
				
			construct {
			
				$puri a ah:Production ;			
					owl:sameAs $puriUitburo ;
				
					ah:cidn {$cidn}^^xsd:string ;	
					
					dc:created {waag:parse-string($production/@date-created)}^^xsd:dateTime ;
					dc:modified {waag:parse-string($production/@date-modified)}^^xsd:dateTime ;	
					
					ah:ageLimitLower {$production/age/lower}^^xsd:integer ;
					ah:ageLimitUpper {$production/age/upper}^^xsd:integer ;
				
					dc:language {$language}^^xsd:string ;						
					ah:subtitleLanguage {$subtitles}^^xsd:string ;
					
					ah:productionType $typeClass .
				
				$typeClass a ah:ProductionType ;			
					 rdfs:label {$typeKey}^^xsd:string .
				
				{ for $genre in $production/genres//genre
					
					let $genreKey := {waag:parse-string($genre/@key)}
					let $genreClass := {waag:class-uri("genre", waag:upper-case-first($genreKey))}
					
					construct {				
						
						$puri ah:genre $genreClass .
						
						$genreClass a ah:Genre ;			
							rdfs:label {$genre}^^xsd:string .
						
					}
				}.
				
				{ for $url in $production/urls//url			
					construct {				
						
						$puri foaf:homepage {waag:parse-http-url($url)}.
						
					}
				}.
				
				{ for $languageBlock in $production/languages//language				
					
					let $language-tag := {waag:parse-locale($languageBlock/@locale)}					
					
					construct {				
						
						$puri dc:title {waag:parse-string($languageBlock/sortname)}@{$language-tag} ;						
							dc:description {waag:parse-string($languageBlock/description)}@{$language-tag} ;
							ah:shortDescription {waag:parse-string($languageBlock/short-description)}@{$language-tag} ;
						
							ah:party {waag:parse-string($languageBlock/party)}@{$language-tag} ;
							ah:people {waag:parse-string($languageBlock/people)}@{$language-tag} .								
	
					}
				} .
				
				{ for $tag in $production/tags//tag
				
					construct {
											
						$puri ah:tag {waag:parse-string($tag)}^^xsd:string.					
						
					}
				} 
	
				#	TODO:
				#	notes
				#	<country>NL</country>				
								
			}
		}
	
##############################################################################################################################
##################   Group   #################################################################################################
##############################################################################################################################

	(:
	return
		for $group in $groups
			
			let $cidn := {$group/cidn}
			
			let $guri := {waag:object-uri($baseuri, "group", $cidn)}
			let $guriUitburo := {concat($baseuriUitburo, "groups/", $cidn)}
				
			construct { 
				$guri a ah:Group ;
					owl:sameAs $guriUitburo ;
				
					ah:cidn {$cidn}^^xsd:string .
					
			}
	:)		

##############################################################################################################################
##############################################################################################################################

	else ()