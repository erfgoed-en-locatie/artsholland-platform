declare namespace dc="http://purl.org/dc/elements/1.1/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace rdfs="http://www.w3.org/2000/01/rdf-schema#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace foaf="http://xmlns.com/foaf/0.1/";
declare namespace owl="http://www.w3.org/2002/07/owl#";

declare namespace nub="http://resources.uitburo.nl/";
declare namespace ah = "http://data.artsholland.com/";

import module namespace waag = "http://waag.org" at "http://localhost:8080/static/xquery/waag.xquery.jsp";

let $productions := //production

let $baseuri := {"http://data.artsholland.com/"}
let $baseuriUitburo := {"http://resources.uitburo.nl/"}

return
	for $production in $productions
			
		let $cidn := {$production/cidn}
		let $puri := {concat($baseuri, "productions/", $cidn)}
		let $puriUitburo := {concat($baseuriUitburo, "productions/", $cidn)}
	
		let $title := {waag:replace-characters($production/title)}
		
		let $typeKey := {$production/type/@key}
		let $typeClass := {if (waag:empty($typeKey)) then () else concat("ah:productionType", waag:capitalize-first-only(data($typeKey)))}
			
		construct {
		
			$puri a ah:Production.			
			$puri owl:sameAs $puriUitburo.
			
			$puri ah:cidn {$cidn}^^xsd:string.
			
			#$puri dc:title {if ($title eq "") then () else $title}.
			#$puri dc:title {if ($title eq "") then () else $title}^^xsd:string.
				
			$puri ah:productionType $typeClass.
			$typeClass a ah:ProductionType.			
			$typeClass rdfs:label {if ($production/type eq "") then () else $production/type}^^xsd:string.
			
			{ for $genre in $production/genres//genre
				
				let $genreKey := {$genre/@key}
				let $genreClass := {if (waag:empty($genreKey)) then () else concat("ah:genre", waag:capitalize-first-only(data($genreKey)))}
				
				construct {				
					
					$puri ah:genre $genreClass.
					$genreClass a ah:Genre.			
					$genreClass rdfs:label {if ($genre eq "") then () else $genre}^^xsd:string.
					
				}
			}.
			
			{ for $url in $production/urls//url			
				construct {				
					
					$puri foaf:homepage {if ($url eq "") then () else waag:replace-characters(waag:correct-url($url))}^^xsd:string.
					
				}
			}.
			
			{ for $language in $production/languages//language
			
				let $locale := {$language/@locale}
				let $language-tag := {waag:get-language-tag($locale)}
				
				let $title := {waag:replace-characters($language/sortname)}					
				let $description := {waag:replace-characters($language/description)}
				let $shortDescription := {waag:replace-characters($language/short-description)}					
				let $party := {waag:replace-characters($language/party)}
				let $people := {waag:replace-characters($language/people)}
				
				construct {				
					
					$puri dc:title {if ($title eq "") then () else $title}@{$language-tag}.
					
					$puri dc:description {if ($description eq "") then () else $description}@{$language-tag}.
					$puri ah:shortDescription {if ($shortDescription eq "") then () else $shortDescription}@{$language-tag}.
					
					$puri ah:party {if ($party eq "") then () else $party}@{$language-tag}.
					$puri ah:people {if ($people eq "") then () else $people}@{$language-tag}.								

				}
			}.
			
			$puri ah:ageLimitLower {$production/age/lower}^^xsd:integer.
			$puri ah:ageLimitUpper {$production/age/upper}^^xsd:integer.
			
			{ for $tag in $production/tags//tag
			
				construct {
										
					$puri ah:tag {if ($tag eq "") then () else waag:replace-characters($tag)}^^xsd:string.					
					
				}
			}.

			#	TODO:
			#	notes
			#	<country>NL</country>
			#	<language>nl_NL</language>
			#	<subtitles>en_UK</subtitles>
			
			$puri dc:language {waag:get-language-tag($production/language)}.			
			$puri ah:subtitleLanguage {waag:get-language-tag($production/subtitles)}			
							
		}