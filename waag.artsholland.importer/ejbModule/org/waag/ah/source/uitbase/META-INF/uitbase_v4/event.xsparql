declare namespace dc="http://purl.org/dc/elements/1.1/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace waag = "http://waag.org";
declare namespace ah = "http://purl.org/artsholland/1.0/";
declare namespace owl="http://www.w3.org/2002/07/owl#";
declare namespace time="http://www.w3.org/2006/time#"; 
declare namespace gr="http://purl.org/goodrelations/v1#";
declare namespace foaf="http://xmlns.com/foaf/0.1/";

declare function waag:escape-for-regex($arg as xs:string) as xs:string {
	translate($arg, '":', "'&#x58;")
};

let $events := //event

let $baseuri := {"http://purl.org/artsholland/1.0/"}
let $baseuriUitburo := {"http://resources.uitburo.nl/"}

return
	for $event in $events	
	
		let $cidn := {$event/cidn}
		let $euri := {concat($baseuri, "events/", $cidn)}
		let $euriUitburo := {concat($baseuriUitburo, "events/", $cidn)}
			
		let $puri := {$event/link[@type="production"]/@ref}
		let $luri := {$event/link[@type="location"]/@ref}
			
		construct {     
			$euri a ah:Event.
			$euri owl:sameAs $euriUitburo.
			
			$euri ah:atLocation $luri.
			$euri ah:hasProduction $puri.
			
			$euri dc:created {$event/@date-created}^^xsd:string.
			$euri dc:modified {$event/@date-changed}^^xsd:string.
			
			$euri dc:title {waag:escape-for-regex($event/title)}^^xsd:string.
			$euri dc:description {waag:escape-for-regex($event/description)}^^xsd:string.
			
    	{ for $pricetag in $event/pricetags//pricetag
				# TODO: maak algemene functie
				let $turi := {concat($euri, "/tickets/", translate(lower-case($pricetag/type), '": ', "'&#x58;-"))}
				let $puri := {concat($turi, "/price")}
				construct {						
					$euri ah:hasTicket $turi.
    			$turi a gr:Offering.
    			
    			$turi dc:description {waag:escape-for-regex($pricetag/description)}^^xsd:string.    				
					#	<ticketsalesinformation>kvk info</ticketsalesinformation>
					#	<ticketsalesphone>kvk telefoon</ticketsalesphone>
					#	<ticketsalesurl>kvk url</ticketsalesurl>
					#	<type>Jeugd</type>
    			
    			$turi gr:hasPriceSpecification $puri.
    			$puri a gr:UnitPriceSpecification.
    			
    			$puri gr:hasMinCurrencyValue {$pricetag/lowest}.    			
    			$puri gr:hasMaxCurrencyValue {$pricetag/highest}.
    			$puri gr:hasCurrency "EUR".    			
				}
			}.
			
			{ for $medium in $event/media//medium
				
				# TODO: maak algemene functie
				let $muri := {concat($euri, "/attachments/", translate(lower-case($medium/title), '": ', "'&#x58;-"))}				
				
				construct {
				
				 	$euri ah:hasAttachment $muri.
				 	$muri a ah:Attachment.
          $muri dc:title {waag:escape-for-regex($medium/title)}^^xsd:string.
          $muri dc:description {waag:escape-for-regex($medium/description)}^^xsd:string.
          $muri foaf:depiction {$medium/ref}.
            
        	#	<title>A family again</title>
          #	<ref>http://uitbase.aub.nl/gfx/content/family308.jpg</ref>
          #	<alt>A family again</alt>
          #	<description>Pic description</description>
          #	<type>afbeelding</type>
        }
      }.
    	
    	# TODO: converteren naar correct formaat??
    	$euri time:hasBeginning {$event/datetime-start}.
    	$euri time:hasEnd {$event/datetime-end}.
    	
    	    
	    #	Nog doen:
	    #		<type key="PREMIERE"/>
	    #		<status key="NORMAL"/>
	    #		<media>
	   	
		}