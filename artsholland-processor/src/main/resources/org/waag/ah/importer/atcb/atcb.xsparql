declare namespace dc="http://purl.org/dc/terms/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace rdfs="http://www.w3.org/2000/01/rdf-schema#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace owl="http://www.w3.org/2002/07/owl#";
declare namespace time="http://www.w3.org/2006/time#"; 
declare namespace foaf="http://xmlns.com/foaf/0.1/";
declare namespace geo="http://www.w3.org/2003/01/geo/wgs84_pos#";
declare namespace vcard="http://www.w3.org/2006/vcard/ns#";
declare namespace gr="http://purl.org/goodrelations/v1#";
declare namespace osgeo="http://rdf.opensahara.com/type/geo/";

declare namespace ah="http://purl.org/artsholland/1.0/";

declare namespace waag="http://waag.org/saxon-extension";

let $items := //item

return

	if ($items) then {
		
##############################################################################################################################
##############################################################################################################################
		
		for $item in $items			
			
			let $trcid := { $item/trcid }		
			
			######## Event ########################################
			
			let $euri := { waag:object-uri("event", $trcid) }			
			let $singledates := { tokenize( $item/singledates, ",") }
			
			######## Production ###################################
			
			let $puri := { waag:object-uri("production", $trcid) }			
			let $urls := { tokenize( $item/urls, ",") }
   		let $types := { tokenize( $item/types, ",") }
	
						
			#"types", comma separated ah:productionType		
			#Beurs,Sportevenement				
			 
			#"media",
			#"thumbnail", 
			
			
			######## Venue ########################################
			
			let $vuri := { waag:object-uri("venue", $trcid) }
			
			let $lat := { waag:parse-non-zero-number($item/latitude) }
			let $long := { waag:parse-non-zero-number($item/longitude) }
						
			let $postal-code := { waag:postal-code(waag:parse-string($item/zipcode)) }						
			let $street-number := { waag:street-number(waag:extract-street-number($item/adres), "") }
			let $street-address := { $item/adres }			
			let $locality := { waag:locality($postal-code, waag:parse-string($item/city)) }
			
			let $auri := { waag:object-uri("address", waag:address-uri($postal-code, $street-number)) }

			construct { 
								
				######## Event ######################################
				
				$euri a ah:Event ;
					ah:trcid { $trcid }^^xsd:string ;
					dc:title { waag:parse-string($item/title) }@{ "nl" } ;
					dc:title { waag:parse-string($item/titleEN) }@{ "en" } ;
					
					ah:venue $vuri ;	
					ah:production $puri ;
					
					time:hasBeginning { waag:parse-date($item/datepattern_startdate, "dd-MM-yyyy") }^^xsd:date ;
					time:hasEnd { waag:parse-date($item/datepattern_enddate, "dd-MM-yyyy") }^^xsd:date .
					
					{ for $singledate in $singledates
						construct {									
							$euri ah:onDate { waag:parse-date($singledate, "dd-MM-yyyy") }^^xsd:date ;
						}
					} .	
					
				######## Production #################################
				
				$puri a ah:Production ;
					ah:trcid { $trcid }^^xsd:string ;
					dc:title { waag:parse-string($item/title) }@{ "nl" } ;
					dc:title { waag:parse-string($item/titleEN) }@{ "en" } ;
					
					dc:description { waag:parse-string($item/longdescription) }@{ "nl" } ;
					ah:shortDescription { waag:parse-string($item/shortdescription) }@{ "nl" } ;
					dc:description { waag:parse-string($item/longdescriptionEN) }@{ "en" } ;
					ah:shortDescription { waag:parse-string($item/shortdescriptionEN) }@{ "en" } .
				
				{ for $url in $urls
					construct {						
						$puri foaf:homepage { waag:parse-http-url($url) } ;						
					}
				} .	
				
				{ for $type in $types
				
					let $typeKey := { waag:parse-string($type) }
					# / en \ en - en unicode er uit!!!
					let $typeClass := { waag:class-uri("productionType", waag:upper-case-first($type)) }
				
					construct {						
						$puri ah:productionType $typeClass .
				
						$typeClass a ah:ProductionType ;			
					 		rdfs:label {$typeKey}^^xsd:string .					 								
					}
				} .			
					
				######## Venue ######################################
				
				$vuri a ah:Venue ;
					ah:trcid { $trcid }^^xsd:string ;
					dc:title { waag:parse-string($item/locatienaam) }^^xsd:string ;
										
					ah:openingHours { waag:parse-string($item/calendarsummary) }@{ "nl" } ;
					ah:openingHours { waag:parse-string($item/calendarsummaryEN) }@{ "en" } ;
					
					geo:lat { $lat }^^xsd:float ;
					geo:long { $long }^^xsd:float ;
	
					ah:geometry { waag:wkt-geometry($lat, $long) }^^osgeo:wkt ;
								
					ah:locationAddress $auri .
					
				$auri a ah:Address ;
        	vcard:street-address { $street-address } ;
					vcard:locality { $locality } ;
					vcard:postal-code { $postal-code } .	

			}			

##############################################################################################################################
##############################################################################################################################

	}	else ()