declare namespace dc="http://purl.org/dc/terms/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace rdfs="http://www.w3.org/2000/01/rdf-schema#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace owl="http://www.w3.org/2002/07/owl#";
declare namespace time="http://www.w3.org/2006/time#"; 
declare namespace foaf="http://xmlns.com/foaf/0.1/";
declare namespace geo="http://www.w3.org/2003/01/geo/wgs84_pos#";
declare namespace vcard="http://www.w3.org/2006/vcard/ns#";
declare namespace gr="http://purl.org/goodrelations/v1#";
declare namespace osgeo="http://rdf.opensahara.com/type/geo/";

declare namespace ah="http://purl.org/artsholland/1.0/";

declare namespace waag="http://waag.org/saxon-extension";

let $articles 			:= //node[descendant::type='article']
let $blogs 					:= //node[descendant::type='blog']
let $editorials 		:= //node[descendant::type='editorial']
let $hotels 				:= //node[descendant::type='hotel']
let $locations 			:= //node[descendant::type='locatie']
let $press_releases := //node[descendant::type='press_release']
let $productions 		:= //node[descendant::type='productie']
let $restaurants 		:= //node[descendant::type='restaurant']
let $routes 				:= //node[descendant::type='route']
let $shops 					:= //node[descendant::type='shop']

return

##############################################################################################################################
##################   Article   ###############################################################################################
##############################################################################################################################

	if ($articles) then {
		for $article in $articles	
		
			let $nid := {$article/nid}
			let $auri := {waag:object-uri("article", $nid)}
		
			let $language-tag := {$article/language}
			
			let $title := {$article/title}
			let $body := {$article/body}
			
			construct { 
							
				$auri a ah:Article ;					
					dc:title {waag:parse-string($title)}@{$language-tag} ;				
					ah:body {waag:parse-string($body)}@{$language-tag} .
							
				# TODO: field_images!!
				# TODO: vragen hoeveel field_images een article kan hebben

			}
			
		}

##############################################################################################################################
##################   Blog   ##################################################################################################
##############################################################################################################################

	else if ($blogs) then {
		for $blog in $blogs	
		
			let $nid := {$blog/nid}
			let $buri := {waag:object-uri("blog", $nid)}
		
			let $language-tag := {$blog/language}
			
			let $title := {$blog/title}
			let $body := {$blog/body}
			
			construct { 
							
				$buri a ah:Blog ;					
					dc:title {waag:parse-string($title)}@{$language-tag} ;				
					ah:body {waag:parse-string($body)}@{$language-tag} .
							
				# TODO: field_blog_image
				# TODO: field_blog_video

			}
			
		}
		
##############################################################################################################################
##################   Editorial   #############################################################################################
##############################################################################################################################

	else if ($editorials) then {
		for $editorial in $editorials	
		
			let $nid := {$editorial/nid}
			let $euri := {waag:object-uri("editorial", $nid)}
		
			let $language-tag := {$editorial/language}
			
			let $title := {$editorial/title}
			let $body := {$editorial/body}			
			
			# TODO: field_editorial_cidn
			#		Dit veld is gevuld met CIDN waar deze editorial betrekking op heeft.
			# TODO: field_images			
			
			construct { 
							
				$euri a ah:Editorial ;					
					dc:title {waag:parse-string($title)}@{$language-tag} ;				
					ah:body {waag:parse-string($body)}@{$language-tag} .

			}
			
		}

##############################################################################################################################
##################   Hotel   #################################################################################################
##############################################################################################################################

	else if ($hotels) then {
		for $hotel in $hotels	
		
			let $nid := {$hotel/nid}
			let $euri := {waag:object-uri("hotel", $nid)}
		
			let $language-tag := {$hotel/language}
			
			let $title := {$hotel/title}
			let $body := {$hotel/body}
			

			let $short_description := {$hotel/field_short_descr/n0/value}
			let $long_description := {$hotel/field_long_descr/n0/value}
			
			let $website := {$hotel/field_website/n0/value}
			let $email := {$hotel/field_email/n0/value}

			let $opening := {$hotel/field_opening/n0/value}
			let $highlights := {$hotel/field_highlights/n0/value}
			let $email := {$hotel/field_transport/n0/value}
			
			let $location := {$hotel/field_location/n0}			
			
			# <location>  		
    	# 	<street>J.C. Verthorenpad 100</street>   
    	# 	<additional/> 
    	# 	<city>Utrecht</city>    
    	# 	<postal_code>3541 MV</postal_code>    
    	# 	<latitude>52.089577</latitude>
    	# 	<longitude>5.077873</longitude>
      # 	<country_name>Netherlands</country_name>
    	# 	<phone>+31 30 286 22 86</phone>  
			# </location>
			
			let $street := {$location/street}
			let $additional := {$location/additional}
			let $city := {$location/street}
			let $postal-code := {$location/street}
			let $lat := { waag:parse-non-zero-number($location/latitude) }
			let $long := { waag:parse-non-zero-number($location/longitude) }
			# TODO: country_name
			let $phone := {$location/phone}						
			
			# TODO: make function to extract number from street address...
			# MOEILIJK WANT SOMMIGE STRAATNAMEN HEBBEN NUMMER... 
			# of makkelijk als je gewoon laatste nummer na laatste spatie pakt
			#let $auri := {waag:object-uri("address", waag:address-uri($postal-code, $venue/street/number, $venue/street/addition))}
			
			# TODO:
			# 	field_images
			# 	field_essential_links
			# 	field_genre
			#	 	taxonomy		
			
			construct { 
							
				$euri a ah:Hotel ;					
					dc:title {waag:parse-string($title)}@{$language-tag} ;				
					ah:body {waag:parse-string($body)}@{$language-tag} ;
					
					geo:lat {$lat}^^xsd:float ;
					geo:long {$long}^^xsd:float ;
	
					geo:geometry{waag:wkt-geometry($lat, $long)}^^osgeo:wkt ;
					
					#ah:locationAddress $auri ;
					
					vcard:email {waag:parse-string($email)}^^xsd:string ;
					
					# TODO: ah???
					ah:telephone {waag:parse-string($phone)}^^xsd:string .
				
				#$auri a ah:Address ;
        #	vcard:street-address {concat($venue/street/name, " ", $venue/street/number, $venue/street/addition)} ;
				#	vcard:locality {waag:parse-string($venue/city)} ;
				#	vcard:postal-code {waag:postal-code(waag:parse-string($venue/postal-code))} .

			}
			
		}	
		
		
		
		
		
		


##############################################################################################################################
##############################################################################################################################

	else ()