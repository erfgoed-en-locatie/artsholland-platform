declare namespace dc="http://purl.org/dc/terms/";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace rdfs="http://www.w3.org/2000/01/rdf-schema#";
declare namespace xsd="http://www.w3.org/2001/XMLSchema#";
declare namespace owl="http://www.w3.org/2002/07/owl#";
declare namespace time="http://www.w3.org/2006/time#"; 
declare namespace foaf="http://xmlns.com/foaf/0.1/";
declare namespace vcard="http://www.w3.org/2006/vcard/ns#";
declare namespace gr="http://purl.org/goodrelations/v1#";
declare namespace ah="http://purl.org/artsholland/1.0/";
declare namespace waag="http://waag.org/saxon-extension";

declare namespace wgs84="http://www.w3.org/2003/01/geo/wgs84_pos#";
declare namespace geo="http://www.opengis.net/ont/geosparql#";
declare namespace geof="http://www.opengis.net/def/function/geosparql/";

declare function waag:get-poi-category($arg as xs:string?) as xs:string? {
  		 if (compare($arg, "MU") = 0) then fn:data("POICategoryMuseum")
  else if (compare($arg, "RE") = 0) then fn:data("POICategoryRestaurant")
  else if (compare($arg, "HO") = 0) then fn:data("POICategoryHotel")
  else if (compare($arg, "UI") = 0) then fn:data("POICategoryGoingOut")
  else if (compare($arg, "CO") = 0) then fn:data("POICategoryCongressAccomodation")
  else if (compare($arg, "AT") = 0) then fn:data("POICategoryAttraction")
  else if (compare($arg, "CA") = 0) then fn:data("POICategoryCamping")
  else if (compare($arg, "BB") = 0) then fn:data("POICategoryBB")
  else if (compare($arg, "BU") = 0) then fn:data("POICategoryBungalowPark")
  else if (compare($arg, "GR") = 0) then fn:data("POICategoryGroupAccomodation")
  else if (compare($arg, "VA") = 0) then fn:data("POICategoryHolidayRental")
  else if (compare($arg, "AP") = 0) then fn:data("POICategoryAppartment")
  else if (compare($arg, "VV") = 0) then fn:data("POICategoryTouristOffice")
  else if (compare($arg, "HT") = 0) then fn:data("POICategoryHostel")
  else if (compare($arg, "GO") = 0) then fn:data("POICategoryGolfClub")
  else if (compare($arg, "EV") = 0) then fn:data("POICategoryEvent")
  else fn:data("POICategoryUnknown")
};
  
declare function waag:get-poi-attribute($arg as xs:string?) as xs:string? {
  		 if (compare($arg, "pr_actyp") = 0) then fn:data("POIAttributeAcType")
  else if (compare($arg, "pr_ambia") = 0) then fn:data("POIAttributeAmbiance")
  else if (compare($arg, "pr_colle") = 0) then fn:data("POIAttributeCollection")
  else if (compare($arg, "pr_attyp") = 0) then fn:data("POIAttributeAtrType")
  else if (compare($arg, "pr_butyp") = 0) then fn:data("POIAttributeBuType")
  else if (compare($arg, "pr_campg") = 0) then fn:data("POIAttributeCampagne")
  else if (compare($arg, "pr_colle") = 0) then fn:data("POIAttributeCollection")
  else if (compare($arg, "pr_condi") = 0) then fn:data("POIAttributeCondition")
  else if (compare($arg, "pr_evtyp") = 0) then fn:data("POIAttributeEvType")
  else if (compare($arg, "pr_facdi") = 0) then fn:data("POIAttributeAccessability")
  else if (compare($arg, "pr_facgn") = 0) then fn:data("POIAttributeFacGen")
  else if (compare($arg, "pr_facpu") = 0) then fn:data("POIAttributeFac")
  else if (compare($arg, "pr_facre") = 0) then fn:data("POIAttributeRecreation")
  else if (compare($arg, "pr_facsa") = 0) then fn:data("POIAttributeSanitary")
  else if (compare($arg, "pr_impor") = 0) then fn:data("POIAttributeInterest")
  else if (compare($arg, "pr_kitch") = 0) then fn:data("POIAttributeCuisine")
  else if (compare($arg, "pr_locat") = 0) then fn:data("POIAttributeSituation")
  else if (compare($arg, "pr_music") = 0) then fn:data("POIAttributeMusicType")
  else if (compare($arg, "pr_servi") = 0) then fn:data("POIAttributeServices")
  else if (compare($arg, "pr_speci") = 0) then fn:data("POIAttributeSpecialities")
  else if (compare($arg, "pr_targg") = 0) then fn:data("POIAttributeTargetGroup")
  else fn:data("POIAttributeUnknown")
};

let $pois := //Poi

return

################################################################################
##################   POI   #####################################################
################################################################################

	if ($pois) then {
		for $poi in $pois	
		
      let $pid := {$poi/operation/id}
      let $puri := {waag:object-uri("poi", "nbtc", $pid)}
			let $lang := {waag:parse-locale($poi/operation/locale)}

			let $locationAddress := { $poi/object/locationAddress }		
				
			let $location-postal-code := { waag:postal-code(waag:parse-string($locationAddress/zipcode)) }
			let $location-locality := { waag:locality($location-postal-code, waag:parse-string($locationAddress/city)) }
			let $location-street-name := { waag:street-name($locationAddress/street) }
			let $location-street-number := { waag:street-number($locationAddress/housenumber) }
			let $location-street-address := { waag:street-address($location-street-name, $location-street-number) }			
			
			let $luri := {waag:object-uri("address", waag:address-uri($location-postal-code, $locationAddress/housenumber))}
			
			let $contactAddress := { $poi/object/contactAddress }
			
      let $contact-postal-code := { waag:postal-code(waag:parse-string($contactAddress/zipcode)) }
			let $contact-locality := { waag:locality($contact-postal-code, waag:parse-string($contactAddress/city)) }
			let $contact-street-name := { waag:street-name($contactAddress/street) }
			let $contact-street-number := { waag:street-number($contactAddress/housenumber) }
			let $contact-street-address := { waag:street-address($contact-street-name, $contact-street-number) }			
			
      let $curi := {waag:object-uri("address", waag:address-uri($contact-postal-code, $contactAddress/housenumber))}
       
      let $lat := { waag:parse-non-zero-number($poi/object/positionList/position/latitude) }
			let $long := { waag:parse-non-zero-number($poi/object/positionList/position/longitude) }
			
			let $category := {waag:get-poi-category($poi/operation/poiCategory)}
			let $caturi := {waag:class-uri($category)}
					
			construct {
              
        $puri a ah:POI ;
              dc:title {waag:parse-string($poi/object/poiName)}@{$lang} ;
              ah:poiCategory {$caturi} ;
              foaf:homepage {$poi/object/poiUrl} ;
              
              ah:locationAddress $luri ;
              ah:contactAddress $curi ;         
    
              wgs84:lat {$lat}^^xsd:float ;
              wgs84:long {$long}^^xsd:float ;
	
              geo:asWKT {waag:wkt-geometry($lat, $long)}^^geo:wktLiteral ;
              
			  vcard:email {waag:parse-string($contactAddress/email)} ;
              ah:telephone {waag:parse-string($contactAddress/phoneGeneral)} ;
              ah:fax {waag:parse-string($contactAddress/faxGeneral)} . 
        
        $caturi a {waag:class-uri("POICategory")} .
                
        $luri a ah:Address ;
              vcard:street-address { $location-street-address } ;
              vcard:locality { $location-locality } ;
              vcard:postal-code { $location-postal-code} .
        
        $curi a ah:Address ;
              vcard:street-address { $contact-street-address } ;
              vcard:locality { $contact-locality } ;
              vcard:postal-code { $contact-postal-code } .
                        
        { for $attr at $pos in $poi/object/attributeList/*                    
          let $auri := {waag:object-uri("poi", "nbtc", $pid, "attribute", string($pos))}
                    
          let $type := waag:get-poi-attribute($attr/@meta)
          let $aturi := waag:class-uri($type)
          
          construct {
            $puri ah:poiAttribute $auri .
            $auri a $aturi ;
                  rdf:label {waag:parse-string($attr)}@{$lang} .
                  
            $aturi a {waag:class-uri("POIAttribute")} .
          }        
        } .
        
        { for $clas at $pos in $poi/object/classificationList/*                    
          let $curi := {waag:object-uri("poi", "nbtc", $pid, "classification", string($pos))}
          
          construct {
            $puri ah:poiClassification $curi .
            $curi rdf:type ah:Classification ;
                  rdf:title {waag:parse-string($clas/classificationOrganisation)} ;
                  rdf:description {waag:parse-string($clas/classificationSymbol)} ;
                  xsd:positiveInteger {$clas/classificationAmount} .
          }        
        } .
        
        { for $open at $pos in $poi/object/openingPeriodList/*
          let $ouri := {concat($puri, "/openinghours/", string($pos))}
          construct {
            $puri gr:hasOpeningHoursSpecification $ouri .
            $ouri rdf:type gr:OpeningHoursSpecification ;
                  gr:validFrom {waag:parse-datetime($open/startDate, "yyyy-MM-ddZ")}^^xsd:dateTime ;
                  gr:validThrough {waag:parse-datetime($open/endDate, "yyyy-MM-ddZ")}^^xsd:dateTime ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/monday, "true") = 0) then "gr:Monday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/tuesday, "true") = 0) then "gr:Tuesday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/wednesday, "true") = 0) then "gr:Wednesday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/thursday, "true") = 0) then "gr:Thursday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/friday, "true") = 0) then "gr:Friday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/saturday, "true") = 0) then "gr:Saturday" else ()} ;
                  gr:hasOpeningHoursDayOfWeek {if (compare($open/sunday, "true") = 0) then "gr:Sunday" else ()} .
                  
            { for $time at $pos in $open/openTimeList/*
              construct {
                $ouri gr:opens {concat($time/timeStart, ":00")}^^xsd:time ;
                      gr:closes {concat($time/timeEnd, ":00")}^^xsd:time .
              }
            }
          }        
        } .
              
        { for $medium at $pos in $poi/object/mediaList/*
          let $muri := {concat($puri, "/attachment/", string($pos))}
          construct {
            $puri ah:attachment $muri .
            $muri rdf:type ah:Attachment ;
                  ah:attachmentType ah:attachmentTypeAfbeelding ;
                  ah:url {waag:parse-http-url($medium/mediaUrl)} ;
                  dc:description {waag:parse-string($medium/mediaAltType)}@{$lang} .
          }        
        } .
        
        { for $price at $pos in $poi/object/priceList/*
          let $ofuri := {concat($puri, "/offering/", string($pos))}
          let $opuri := {concat($puri, "/price/", string($pos))}
          construct {
            $puri gr:offers $ofuri .
            $ofuri rdf:type gr:Offering ;
                   gr:description {waag:parse-string($price/priceType)}@{$lang} ;
                   gr:validFrom {concat($price/year, "-01-01")}^^xsd:date ;
                   gr:validThrough {concat($price/year, "-12-31")}^^xsd:date ;
                   gr:hasPriceSpecification $opuri .
            $opuri rdf:type gr:PriceSpecification ;
                   gr:hasCurrency {"EUR"} ;
                   gr:hasCurrencyValue {$price/amount}^^xsd:decimal .
          }        
        }             
    }
	}

	else ()
	